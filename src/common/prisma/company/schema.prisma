generator client {
    provider = "prisma-client-js"
    output   = "../../../../node_modules/.prisma/company"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum RoleType {
    System
    Custom
}

enum Gender {
    Male
    Female
    Unknown
}

enum RelationshipType {
    Father
    Mother
    Husband
    Wife
    Son
    Daughter
    Brother
    Sister
    Nephew
    Niece
}

enum EmploymentType {
    Fulltime
    Contract
    Internship
}

enum AddressType {
    Physical
    Postal
}

enum AddressPurpose {
    Primary
    Billing
    Operational
    Temporary
    Old
}

enum EmployeeStatus {
    Active
    Inactive
    Suspended
}

enum MessageType {
    Email
    Sms
}

enum MessageStatus {
    Pending
    Processed
    Cancelled
    Sent
    Received
    Failed
    Deleted
}

enum MailProvider {
    SendGrid
    Smtp
}

enum AutomationFrequency {
    Daily
    Weekly
    Monthly
    Yearly
}

enum Mood {
    Terrible
    Bad
    Okay
    Good
    Excellent
}

enum FeedbackType {
    Complaint
    Suggestion
}

model Country {
    id             String          @id @default(uuid()) @db.Uuid
    name           String          @unique() @db.VarChar(50)
    iso2           String          @unique() @db.Char(2)
    iso3           String          @unique() @db.Char(3)
    isoNumeric     String          @db.VarChar(3)
    phoneCode      String          @db.VarChar(50)
    continent      String?         @db.VarChar(20)
    capital        String          @db.VarChar(50)
    timeZone       String          @db.VarChar(50)
    currency       String          @db.VarChar(20)
    symbol         String?         @db.VarChar(5)
    wholePart      String?         @db.VarChar(20)
    fractionPart   String?         @db.VarChar(20)
    languageCodes  String?         @db.VarChar(100)
    perUserPrice   Float           @default(0.00) @db.DoublePrecision()
    status         Boolean         @default(false) @db.Boolean
    createdAt      DateTime        @default(now()) @db.Timestamptz(6)
    createdBy      String?         @db.Uuid
    updatedAt      DateTime        @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy      String?         @db.Uuid
    states         State[]
    usersAddresses UserAddress[]
    users          User[]
    branches       CompanyBranch[]

    @@map("country")
}

model State {
    id             String          @id @default(uuid()) @db.Uuid
    name           String          @unique() @db.VarChar(50)
    iso2           String          @unique() @db.VarChar(10)
    countryId      String          @db.Uuid
    status         Boolean         @default(true) @db.Boolean
    createdAt      DateTime        @default(now()) @db.Timestamptz(6)
    createdBy      String?         @db.Uuid
    updatedAt      DateTime        @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy      String?         @db.Uuid
    country        Country         @relation(fields: [countryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    usersAddresses UserAddress[]
    users          User[]
    branches       CompanyBranch[]

    @@map("state")
}

model User {
    id                String         @id @default(uuid()) @db.Uuid
    firstName         String         @db.VarChar
    middleName        String?        @db.VarChar
    lastName          String         @db.VarChar
    maidenName        String?        @db.VarChar
    formerNames       String?        @db.VarChar
    dateOfBirth       DateTime?      @db.Date
    password          String?
    prefix            String?        @db.VarChar
    suffix            String?        @db.VarChar
    gender            Gender?
    photoId           String?        @db.Uuid
    preferredLanguage String?        @db.VarChar
    lastLogin         DateTime?
    lastLoginIp       String?
    roleId            String?        @db.Uuid
    employeeId        String?        @unique @db.Uuid
    stateId           String?        @db.Uuid
    countryId         String?        @db.Uuid
    createdAt         DateTime       @default(now()) @db.Timestamptz(6)
    createdBy         String?        @db.Uuid
    updatedAt         DateTime       @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy         String?        @db.Uuid
    employee          Employee?
    role              Role?          @relation(fields: [roleId], references: [id])
    messages          Message[]
    photo             File?          @relation(fields: [photoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    emails            UserEmail[]
    phones            UserPhone[]
    addresses         UserAddress[]
    nextOfKin         UserNextOfKin?
    relations         UserRelation[]
    state             State?         @relation(fields: [stateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    country           Country?       @relation(fields: [countryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("user")
}

model UserEmail {
    id         String   @id @default(uuid()) @db.Uuid
    userId     String   @db.Uuid
    email      String   @unique @db.VarChar
    isPrimary  Boolean  @default(false) @db.Boolean
    isVerified Boolean  @default(false) @db.Boolean
    status     Boolean  @default(true) @db.Boolean
    createdAt  DateTime @default(now()) @db.Timestamptz(6)
    createdBy  String?  @db.Uuid
    updatedAt  DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy  String?  @db.Uuid
    user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("user_email")
}

model UserPhone {
    id        String   @id @default(uuid()) @db.Uuid
    userId    String   @db.Uuid
    phone     String   @unique @db.VarChar
    isPrimary Boolean  @default(false) @db.Boolean
    // isVerified Boolean  @default(false) @db.Boolean
    status    Boolean  @default(true) @db.Boolean
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    createdBy String?  @db.Uuid
    updatedAt DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy String?  @db.Uuid
    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("user_phone")
}

model UserAddress {
    id        String   @id @default(uuid()) @db.Uuid
    label     String?  @db.VarChar
    address1  String   @db.VarChar
    address2  String?  @db.VarChar
    townCity  String?  @db.VarChar
    stateId   String   @db.Uuid
    countryId String   @db.Uuid
    purpose   String?  @db.VarChar
    type      String?  @db.VarChar
    postCode  String?  @db.VarChar
    userId    String   @db.Uuid
    status    Boolean  @default(true)
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    createdBy String?  @db.Uuid
    updatedAt DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy String?  @db.Uuid
    user      User     @relation(fields: [userId], references: [id])
    country   Country  @relation(fields: [countryId], references: [id])
    state     State    @relation(fields: [stateId], references: [id])

    @@map("user_address")
}

model UserNextOfKin {
    id           String           @id @default(uuid()) @db.Uuid
    userId       String           @unique() @db.Uuid
    firstName    String           @db.VarChar
    middleName   String?          @db.VarChar
    lastName     String           @db.VarChar
    maidenName   String?          @db.VarChar
    formerNames  String?          @db.VarChar
    dateOfBirth  DateTime?        @db.Timestamptz(6)
    relationship RelationshipType
    user         User?            @relation(fields: [userId], references: [id])

    @@map("user_next_of_kin")
}

model UserRelation {
    id           String           @id @default(uuid()) @db.Uuid
    userId       String           @db.Uuid
    firstName    String           @db.VarChar
    middleName   String?          @db.VarChar
    lastName     String           @db.VarChar
    maidenName   String?          @db.VarChar
    formerNames  String?          @db.VarChar
    dateOfBirth  DateTime?        @db.Timestamptz(6)
    relationship RelationshipType
    status       Boolean          @default(true) @db.Boolean
    createdAt    DateTime         @default(now()) @db.Timestamptz(6)
    createdBy    String?          @db.Uuid
    updatedAt    DateTime         @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy    String?          @db.Uuid
    user         User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("user_relation")
}

model Role {
    id              String               @id @default(uuid()) @db.Uuid
    name            String               @unique() @db.VarChar(50)
    description     String?              @db.VarChar(500)
    code            String               @unique() @db.VarChar(20)
    type            RoleType             @default(Custom)
    defaultPage     String?              @db.VarChar(50)
    status          Boolean              @default(true) @db.Boolean
    createdAt       DateTime             @default(now()) @db.Timestamptz(6)
    createdBy       String?              @db.Uuid
    updatedAt       DateTime             @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy       String?              @db.Uuid
    users           User[]
    permissions     RolePermission[]
    menuPermissions RoleMenuPermission[]

    @@map("role")
}

model Permission {
    id        String           @id @default(uuid()) @db.Uuid
    action    String           @db.VarChar(20)
    subject   String           @db.VarChar(50)
    status    Boolean          @default(true) @db.Boolean
    createdAt DateTime         @default(now()) @db.Timestamptz(6)
    createdBy String?          @db.Uuid
    updatedAt DateTime         @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy String?          @db.Uuid
    roles     RolePermission[]

    @@index([action, subject])
    @@map("permission")
}

model RolePermission {
    id           String     @id @default(uuid()) @db.Uuid
    roleId       String     @db.Uuid
    permissionId String     @db.Uuid
    status       Boolean    @default(true) @db.Boolean
    createdAt    DateTime   @default(now()) @db.Timestamptz(6)
    createdBy    String?    @db.Uuid
    updatedAt    DateTime   @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy    String?    @db.Uuid
    role         Role       @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    permission   Permission @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([roleId, permissionId])
    @@map("role_permission")
}

model Module {
    id               String       @id @default(uuid()) @db.Uuid
    name             String       @unique() @db.VarChar(50)
    code             String       @unique() @db.VarChar(20)
    path             String?      @unique() @db.VarChar(50)
    icon             String?      @db.VarChar(20)
    shortDescription String       @db.VarChar(255)
    sequence         Int          @db.SmallInt
    status           Boolean      @default(false) @db.Boolean
    createdAt        DateTime     @default(now()) @db.Timestamptz(6)
    createdBy        String?      @db.Uuid
    updatedAt        DateTime     @default(now()) @updatedAt @db.Timestamptz(6)
    updatedBy        String?      @db.Uuid
    menus            ModuleMenu[]

    @@map("module")
}

model ModuleMenu {
    id              String               @id @default(uuid()) @db.Uuid
    label           String               @db.VarChar(50)
    code            String               @unique() @db.VarChar(50)
    path            String               @db.VarChar(100)
    icon            String?              @db.VarChar(20)
    sequence        Int                  @db.SmallInt
    parentId        String?              @db.Uuid
    moduleId        String               @db.Uuid
    status          Boolean              @default(true) @db.Boolean
    createdAt       DateTime             @default(now()) @db.Timestamptz(6)
    createdBy       String?              @db.Uuid
    updatedAt       DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
    updatedBy       String?              @db.Uuid
    module          Module               @relation(fields: [moduleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parent          ModuleMenu?          @relation("MenuSubs", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children        ModuleMenu[]         @relation("MenuSubs")
    rolePermissions RoleMenuPermission[]

    @@map("module_menu")
}

model RoleMenuPermission {
    id           String     @id @default(uuid()) @db.Uuid
    roleId       String     @db.Uuid
    moduleMenuId String     @db.Uuid
    permission   Boolean    @default(false) @db.Boolean
    status       Boolean    @default(true) @db.Boolean
    createdAt    DateTime   @default(now()) @db.Timestamptz(6)
    createdBy    String?    @db.Uuid
    updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
    updatedBy    String?    @db.Uuid
    role         Role       @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    moduleMenu   ModuleMenu @relation(fields: [moduleMenuId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([roleId, moduleMenuId])
    @@map("role_menu_permission")
}

model Employee {
    id                 String               @id @default(uuid()) @db.Uuid
    employeeNo         String               @unique @db.VarChar(20)
    userId             String               @unique @db.Uuid
    branchId           String?              @db.Uuid
    jobRoleId          String?              @db.Uuid
    employmentType     EmploymentType
    status             EmployeeStatus       @default(Active)
    createdAt          DateTime             @default(now()) @db.Timestamptz(6)
    createdBy          String?              @db.Uuid
    updatedAt          DateTime             @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy          String?              @db.Uuid
    jobRole            JobRole?             @relation(fields: [jobRoleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    departments        EmployeeDepartment[]
    files              EmployeeFile[]
    user               User                 @relation(fields: [userId], references: [id])
    sumups             EmployeeSumUp[]
    feedbacks          EmployeeFeedback[]
    shoutouts          EmployeeShoutout[]
    branch             CompanyBranch?       @relation(fields: [branchId], references: [id])
    managedDepartments DepartmentManager[]

    @@map("employee")
}

model EmployeeDepartment {
    id           String     @id @default(uuid()) @db.Uuid
    employeeId   String     @db.Uuid
    departmentId String     @db.Uuid
    isDefault    Boolean    @default(false) @db.Boolean
    status       Boolean    @default(true) @db.Boolean
    createdAt    DateTime   @default(now()) @db.Timestamptz(6)
    createdBy    String?    @db.Uuid
    updatedAt    DateTime   @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy    String?    @db.Uuid
    department   Department @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    employee     Employee   @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([employeeId, departmentId])
    @@map("employee_department")
}

model EmployeeSetting {
    id        String   @id @default(uuid()) @db.Uuid
    prefix    String?  @db.VarChar
    suffix    String?  @db.VarChar
    start     Int      @default(1)
    lastId    Int      @default(0)
    length    Int      @default(4)
    status    Boolean  @default(true)
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    createdBy String?  @db.Uuid
    updatedAt DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy String?  @db.Uuid

    @@map("employee_setting")
}

model CompanyUserBranch {
    id        String        @id @default(uuid()) @db.Uuid
    userId    String        @db.Uuid
    branchId  String        @db.Uuid
    isDefault Boolean       @default(false) @db.Boolean
    status    Boolean       @default(true) @db.Boolean
    createdAt DateTime      @default(now()) @db.Timestamptz(6)
    createdBy String?       @db.Uuid
    updatedAt DateTime      @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy String?       @db.Uuid
    branch    CompanyBranch @relation(fields: [branchId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([userId, branchId])
    @@map("company_user_branch")
}

model CompanyBranch {
    id                String              @id @default(uuid()) @db.Uuid
    name              String              @unique() @db.VarChar(100)
    email             String?             @db.VarChar(50)
    phone             String?             @db.VarChar(50)
    stateId           String              @db.Uuid
    countryId         String              @db.Uuid
    apartmentBuilding String?             @db.VarChar(50)
    address1          String              @db.VarChar(150)
    address2          String?             @db.VarChar(150)
    townCity          String?             @db.VarChar(50)
    postCode          String?             @db.VarChar(10)
    longitude         Float?              @db.DoublePrecision()
    latitude          Float?              @db.DoublePrecision()
    isDefault         Boolean             @default(false) @db.Boolean
    status            Boolean             @default(true) @db.Boolean
    createdAt         DateTime            @default(now()) @db.Timestamptz(6)
    createdBy         String?             @db.Uuid
    updatedAt         DateTime            @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy         String?             @db.Uuid
    country           Country             @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    state             State               @relation(fields: [stateId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    employees         Employee[]
    userBranches      CompanyUserBranch[]

    @@index([isDefault])
    @@map("company_branch")
}

model Department {
    id          String               @id @default(uuid()) @db.Uuid
    name        String               @unique @db.VarChar
    code        String?              @unique @db.VarChar(50)
    alias       String?              @unique @db.VarChar(100)
    description String?              @db.VarChar(255)
    managerId   String?              @db.Uuid
    status      Boolean              @default(true) @db.Boolean
    createdAt   DateTime             @default(now()) @db.Timestamptz(6)
    createdBy   String?              @db.Uuid
    updatedAt   DateTime             @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy   String?              @db.Uuid
    employees   EmployeeDepartment[]
    manager     DepartmentManager?   @relation(fields: [managerId], references: [id])

    @@map("deparment")
}

model DepartmentManager {
    id           String       @id @default(uuid()) @db.Uuid
    departmentId String       @db.Uuid
    employeeId   String       @db.Uuid
    status       Boolean      @default(true) @db.Boolean
    createdAt    DateTime     @default(now()) @db.Timestamptz(6)
    createdBy    String?      @db.Uuid
    updatedAt    DateTime     @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy    String?      @db.Uuid
    department   Department[]
    manager      Employee     @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("department_manager")
}

model File {
    id        String         @id @default(uuid()) @db.Uuid
    url       String         @db.VarChar
    key       String         @unique() @db.VarChar
    eTag      String?        @db.VarChar
    bucket    String?        @db.VarChar
    name      String?        @db.VarChar
    createdAt DateTime       @default(now()) @db.Timestamptz(6)
    createdBy String?        @db.Uuid
    updatedAt DateTime       @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy String?        @db.Uuid
    employees EmployeeFile[]
    users     User[]

    @@map("file")
}

model EmployeeFile {
    id         String   @id @default(uuid()) @db.Uuid
    employeeId String   @db.Uuid
    fileId     String   @db.Uuid
    status     Boolean  @default(true) @db.Boolean
    createdAt  DateTime @default(now()) @db.Timestamptz(6)
    createdBy  String?  @db.Uuid
    updatedAt  DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy  String?  @db.Uuid
    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    file       File     @relation(fields: [fileId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("employee_file")
}

model JobRole {
    id          String     @id @default(uuid()) @db.Uuid
    levelId     String?    @unique @db.Uuid
    title       String     @unique() @db.VarChar(100)
    description String?    @db.VarChar(255)
    status      Boolean    @default(true)
    createdAt   DateTime   @default(now()) @db.Timestamptz(6)
    createdBy   String?    @db.Uuid
    updatedAt   DateTime   @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy   String?    @db.Uuid
    employees   Employee[]
    level       JobLevel?  @relation(fields: [levelId], references: [id])

    @@map("job_role")
}

model JobLevel {
    id          String    @id @default(uuid()) @db.Uuid
    title       String    @unique() @db.VarChar(100)
    description String?   @db.VarChar(255)
    rank        Int       @db.Integer
    status      Boolean   @default(true)
    createdAt   DateTime  @default(now()) @db.Timestamptz(6)
    createdBy   String?   @db.Uuid
    updatedAt   DateTime  @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy   String?   @db.Uuid
    jobRoles    JobRole[]

    @@map("job_level")
}

model Message {
    id         String           @id @default(uuid()) @db.Uuid
    type       MessageType
    subject    String?          @db.VarChar(100)
    bindings   Json             @db.JsonB
    templateId String?          @db.Uuid
    direction  Int              @default(0) @db.Integer
    isDraft    Boolean          @default(false) @db.Boolean()
    isArchived Boolean          @default(false) @db.Boolean()
    status     MessageStatus    @default(Pending)
    createdAt  DateTime         @default(now()) @db.Timestamptz(6)
    createdBy  String?          @db.Uuid
    updatedAt  DateTime         @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy  String?          @db.Uuid
    template   MessageTemplate? @relation(fields: [templateId], references: [id])
    files      MessageFile[]
    sender     User?            @relation(fields: [createdBy], references: [id])

    @@index([id, createdBy])
    @@map("message")
}

model MessageFile {
    id           String   @id @default(uuid()) @db.Uuid
    filePath     String   @unique() @db.VarChar
    isAttachment Boolean  @default(true) @db.Boolean
    isPublic     Boolean  @default(false) @db.Boolean
    status       Boolean  @default(true) @db.Boolean
    messageId    String   @db.Uuid
    createdAt    DateTime @default(now()) @db.Timestamptz(6)
    createdBy    String?  @db.Uuid
    updatedAt    DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy    String?  @db.Uuid
    message      Message  @relation(fields: [messageId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("message_file")
}

model MessageTemplate {
    id        String      @id @default(uuid()) @db.Uuid
    name      String      @db.VarChar(50)
    code      String?     @unique() @db.VarChar(50)
    type      MessageType @default(Email)
    subject   String?     @db.VarChar
    isHtml    Boolean     @default(false) @db.Boolean
    body      String      @db.Text
    status    Boolean     @default(true) @db.Boolean
    createdAt DateTime    @default(now()) @db.Timestamptz(6)
    createdBy String?     @db.Uuid
    updatedAt DateTime    @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy String?     @db.Uuid
    // files     CoreMessageTemplateFile[]
    messages  Message[]

    @@unique([name, type])
    @@map("message_template")
}

model MessageSetting {
    id                    String        @id @default(uuid()) @db.Uuid
    smsSenderId           String?       @db.VarChar
    maxPagePerSMS         Int?
    emailSenderName       String?       @db.VarChar
    emailSenderAddress    String?       @db.VarChar
    accessKey             String?       @db.VarChar
    emailGateway          Int?
    smsProviderTenantId   String?
    preferredMailProvider MailProvider?
    smtpHost              String?       @db.VarChar
    smtpPort              Int?
    smtpSecure            Boolean       @default(true)
    smtpAuthUser          String?       @db.VarChar
    smtpAuthPassword      String?       @db.VarChar
    sendGridApiKey        String?       @db.VarChar
    status                Boolean       @default(true)
    createdAt             DateTime      @default(now()) @db.Timestamptz(6)
    createdBy             String?       @db.Uuid
    updatedAt             DateTime      @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy             String?       @db.Uuid

    @@map("message_setting")
}

// templates
model EmployeeShoutout {
    id            String    @id @default(uuid()) @db.Uuid
    employeeId    String?   @db.Uuid
    beneficiaries String[]
    status        Boolean   @default(true)
    createdAt     DateTime  @default(now()) @db.Timestamptz(6)
    createdBy     String?   @db.Uuid
    updatedAt     DateTime  @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy     String?   @db.Uuid
    employee      Employee? @relation(fields: [employeeId], references: [id])

    @@map("employee_shoutout")
}

model EmployeeSumUp {
    id         String   @id @default(uuid()) @db.Uuid
    employeeId String   @db.Uuid
    mood       Mood
    plan       String[] @db.VarChar
    past       String[] @db.VarChar
    blockers   String?  @db.VarChar
    support    String[]
    status     Boolean  @default(true)
    createdAt  DateTime @default(now()) @db.Timestamptz(6)
    createdBy  String?  @db.Uuid
    updatedAt  DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy  String?  @db.Uuid
    employee   Employee @relation(fields: [employeeId], references: [id])

    @@map("employee_sum_up")
}

model EmployeeFeedback {
    id         String       @id @default(uuid()) @db.Uuid
    employeeId String?      @db.Uuid
    type       FeedbackType
    message    String       @db.VarChar
    isResolved Boolean?
    status     Boolean      @default(true)
    createdAt  DateTime     @default(now()) @db.Timestamptz(6)
    createdBy  String?      @db.Uuid
    updatedAt  DateTime     @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy  String?      @db.Uuid
    employee   Employee?    @relation(fields: [employeeId], references: [id])

    @@map("employee_feedback")
}

model ValueStar {
    id        String   @id @default(uuid()) @db.Uuid
    status    Boolean  @default(true)
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    createdBy String?  @db.Uuid
    updatedAt DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy String?  @db.Uuid

    @@map("value_star")
}

// template configurations
model ShoutoutConfig {
    id        String   @id @default(uuid()) @db.Uuid
    status    Boolean  @default(true)
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    createdBy String?  @db.Uuid
    updatedAt DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy String?  @db.Uuid

    @@map("shoutout_config")
}

model PeerConfig {
    id        String   @id @default(uuid()) @db.Uuid
    status    Boolean  @default(true)
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    createdBy String?  @db.Uuid
    updatedAt DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy String?  @db.Uuid

    @@map("peer_config")
}

model SparkConfig {
    id        String   @id @default(uuid()) @db.Uuid
    status    Boolean  @default(true)
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    createdBy String?  @db.Uuid
    updatedAt DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy String?  @db.Uuid

    @@map("spark_config")
}

model TeamSumUpConfig {
    id        String   @id @default(uuid()) @db.Uuid
    status    Boolean  @default(true)
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    createdBy String?  @db.Uuid
    updatedAt DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
    updatedBy String?  @db.Uuid

    @@map("team_sum_up_config")
}
