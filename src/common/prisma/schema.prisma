generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MessageType {
  Email
  Sms
}

enum MessageStatus {
  Pending
  Cancelled
  Sent
  Received
  Failed
  Deleted
}

enum CompanyRequestStatus {
  Approved
  Onboarded
  Pending
  Rejected
}

model BaseCountry {
  id            String        @id @default(uuid()) @db.Uuid
  name          String        @unique() @db.VarChar(50)
  iso2          String        @unique() @db.Char(2)
  iso3          String        @unique() @db.Char(3)
  isoNumeric    String        @db.VarChar(3)
  phoneCode     String        @db.VarChar(50)
  continent     String?       @db.VarChar(20)
  capital       String        @db.VarChar(50)
  timeZone      String        @db.VarChar(50)
  currency      String        @db.VarChar(20)
  symbol        String?       @db.VarChar(5)
  wholePart     String?       @db.VarChar(20)
  fractionPart  String?       @db.VarChar(20)
  languageCodes String?       @db.VarChar(100)
  perUserPrice  Float         @default(0.00) @db.DoublePrecision()
  status        Boolean       @default(false) @db.Boolean
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  createdBy     String?       @db.Uuid
  updatedAt     DateTime      @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy     String?       @db.Uuid
  states        BaseState[]
  companies     BaseCompany[]

  @@map("base_country")
}

model BaseState {
  id        String        @id @default(uuid()) @db.Uuid
  name      String        @unique() @db.VarChar(50)
  iso2      String        @unique() @db.VarChar(10)
  countryId String        @db.Uuid
  status    Boolean       @default(true) @db.Boolean
  createdAt DateTime      @default(now()) @db.Timestamptz(6)
  createdBy String?       @db.Uuid
  updatedAt DateTime      @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy String?       @db.Uuid
  companies BaseCompany[]
  country   BaseCountry   @relation(fields: [countryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("base_state")
}

model BaseUser {
  id         String            @id @default(uuid()) @db.Uuid
  firstName  String            @db.VarChar
  middleName String?           @db.VarChar
  lastName   String            @db.VarChar
  email      String            @unique() @db.VarChar
  status     Boolean           @default(true) @db.Boolean
  createdAt  DateTime          @default(now()) @db.Timestamptz(6)
  createdBy  String?           @db.Uuid
  updatedAt  DateTime          @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy  String?           @db.Uuid
  companies  BaseUserCompany[]

  @@map("base_user")
}

model AllowedUser {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique()
  status    Boolean  @default(true) @db.Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String?  @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy String?  @db.Uuid

  @@map("allowed_user")
}

model BaseCompany {
  id        String             @id @default(uuid()) @db.Uuid
  name      String             @unique() @db.VarChar(255)
  email     String             @unique() @db.VarChar(255)
  code      String             @unique() @db.VarChar(20)
  logo      String?            @db.VarChar
  phone     String             @db.VarChar(50)
  countryId String             @db.Uuid
  stateId   String             @db.Uuid
  address1  String             @db.VarChar(150)
  address2  String?            @db.VarChar(150)
  townCity  String?            @db.VarChar(50)
  postCode  String?            @db.VarChar
  mission   String?            @db.VarChar
  vision    String?            @db.VarChar
  status    Boolean            @default(true) @db.Boolean
  createdAt DateTime           @default(now()) @db.Timestamptz(6)
  createdBy String?            @db.Uuid
  updatedAt DateTime           @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy String?            @db.Uuid
  users     BaseUserCompany[]
  values    BaseCompanyValue[]
  messages  BaseMessage[]
  country   BaseCountry?       @relation(fields: [countryId], references: [id])
  state     BaseState?         @relation(fields: [stateId], references: [id])

  @@map("base_company")
}

model BaseCompanyRequest {
  id           String               @id @default(uuid()) @db.Uuid
  name         String               @unique() @db.VarChar(100)
  email        String               @unique() @db.VarChar(150)
  contactEmail String               @unique() @db.VarChar(150)
  phone        String               @db.VarChar(50)
  countryId    String               @db.Uuid
  stateId      String               @db.Uuid
  address1     String               @db.VarChar(150)
  address2     String?              @db.VarChar(150)
  townCity     String?              @db.VarChar(50)
  code         String?              @unique() @db.VarChar
  postCode     String?              @db.VarChar(10)
  mission      String?              @db.VarChar
  vision       String?              @db.VarChar
  values       String[]
  contactInfo  Json                 @db.JsonB
  status       CompanyRequestStatus @default(Pending)
  createdAt    DateTime             @default(now()) @db.Timestamptz(6)
  createdBy    String?              @db.Uuid
  updatedAt    DateTime             @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy    String?              @db.Uuid

  @@map("base_company_request")
}

model BaseCompanyValue {
  id        String      @id @default(uuid()) @db.Uuid
  companyId String      @db.Uuid
  value     String      @db.VarChar(255)
  status    Boolean     @default(true) @db.Boolean
  createdAt DateTime    @default(now()) @db.Timestamptz(6)
  createdBy String?     @db.Uuid
  updatedAt DateTime    @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy String?     @db.Uuid
  company   BaseCompany @relation(fields: [companyId], references: [id])

  @@map("base_company_value")
}

model BaseUserCompany {
  id        String      @id @default(uuid()) @db.Uuid
  userId    String      @db.Uuid
  companyId String      @db.Uuid
  status    Boolean     @default(true) @db.Boolean
  createdAt DateTime    @default(now()) @db.Timestamptz(6)
  createdBy String?     @db.Uuid
  updatedAt DateTime    @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy String?     @db.Uuid
  user      BaseUser    @relation(fields: [userId], references: [id])
  company   BaseCompany @relation(fields: [companyId], references: [id])

  @@map("base_user_company")
}

model BasePackage {
  id            String                    @id @default(uuid()) @db.Uuid
  name          String                    @unique() @db.VarChar(255)
  unitPrice     Float                     @db.DoublePrecision()
  discount      Float?                    @default(0) @db.DoublePrecision()
  status        Boolean                   @default(true) @db.Boolean
  createdAt     DateTime                  @default(now()) @db.Timestamptz(6)
  createdBy     String?                   @db.Uuid
  updatedAt     DateTime                  @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy     String?                   @db.Uuid
  subscriptions BasePackageSubscription[]
  courses       BasePackageCourse[]
  templates     BasePackageTemplates[]

  @@map("base_package")
}

model BaseCourse {
  id        String              @id @default(uuid()) @db.Uuid
  name      String              @unique() @db.VarChar(255)
  url       String?
  quiz      String? // come back to this
  lesson    String? // come back to this
  status    Boolean             @default(true) @db.Boolean
  createdAt DateTime            @default(now()) @db.Timestamptz(6)
  createdBy String?             @db.Uuid
  updatedAt DateTime            @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy String?             @db.Uuid
  packages  BasePackageCourse[]

  @@map("base_course")
}

model BasePackageCourse {
  id        String      @id @default(uuid()) @db.Uuid
  packageId String      @db.Uuid
  courseId  String      @db.Uuid
  status    Boolean     @default(true) @db.Boolean
  createdAt DateTime    @default(now()) @db.Timestamptz(6)
  createdBy String?     @db.Uuid
  updatedAt DateTime    @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy String?     @db.Uuid
  package   BasePackage @relation(fields: [packageId], references: [id])
  course    BaseCourse  @relation(fields: [courseId], references: [id])

  @@map("base_package_course")
}

model BaseTemplate {
  id        String                 @id @default(uuid()) @db.Uuid
  name      String                 @unique() @db.VarChar(255)
  status    Boolean                @default(true) @db.Boolean
  createdAt DateTime               @default(now()) @db.Timestamptz(6)
  createdBy String?                @db.Uuid
  updatedAt DateTime               @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy String?                @db.Uuid
  templates BasePackageTemplates[]

  @@map("base_template")
}

model BasePackageTemplates {
  id         String       @id @default(uuid()) @db.Uuid
  packageId  String       @db.Uuid
  templateId String       @db.Uuid
  status     Boolean      @default(true) @db.Boolean
  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  createdBy  String?      @db.Uuid
  updatedAt  DateTime     @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy  String?      @db.Uuid
  package    BasePackage  @relation(fields: [packageId], references: [id])
  template   BaseTemplate @relation(fields: [templateId], references: [id])

  @@map("base_package_templates")
}

model BasePackageSubscription {
  id        String      @id @default(uuid()) @db.Uuid
  packageId String      @db.Uuid
  startDate DateTime    @db.Timestamptz(6)
  endDate   DateTime    @db.Timestamptz(6)
  status    Boolean     @default(true) @db.Boolean
  createdAt DateTime    @default(now()) @db.Timestamptz(6)
  createdBy String?     @db.Uuid
  updatedAt DateTime    @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy String?     @db.Uuid
  package   BasePackage @relation(fields: [packageId], references: [id])

  @@map("base_package_subscription")
}

model Waitlist {
  id        String   @id @default(uuid()) @db.Uuid
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  email     String   @unique()
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@map("waitlist")
}

model BaseMessage {
  id         String               @id @default(uuid()) @db.Uuid
  type       MessageType          @default(Email)
  bindings   Json                 @db.JsonB
  templateId String?              @db.Uuid
  companyId  String               @db.Uuid
  status     MessageStatus        @default(Pending)
  createdAt  DateTime             @default(now()) @db.Timestamptz(6)
  createdBy  String?              @db.Uuid
  updatedAt  DateTime             @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy  String?              @db.Uuid
  template   BaseMessageTemplate? @relation(fields: [templateId], references: [id])
  company    BaseCompany          @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("base_message")
}

model BaseMessageFile {
  id           String              @id @default(uuid()) @db.Uuid
  filePath     String              @unique() @db.VarChar(255)
  isAttachment Boolean             @default(true) @db.Boolean
  isPublic     Boolean             @default(false) @db.Boolean
  templateId   String              @db.Uuid
  status       Boolean             @default(true) @db.Boolean
  createdAt    DateTime            @default(now()) @db.Timestamptz(6)
  createdBy    String?             @db.Uuid
  updatedAt    DateTime            @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy    String?             @db.Uuid
  template     BaseMessageTemplate @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("base_message_file")
}

model BaseMessageTemplate {
  id        String            @id @default(uuid()) @db.Uuid
  name      String            @db.VarChar(50)
  code      String            @unique() @db.VarChar(20)
  type      MessageType       @default(Email)
  subject   String?           @db.VarChar(255)
  isHtml    Boolean           @default(false) @db.Boolean
  body      String            @db.Text
  status    Boolean           @default(true) @db.Boolean
  createdAt DateTime          @default(now()) @db.Timestamptz(6)
  createdBy String?           @db.Uuid
  updatedAt DateTime          @default(now()) @updatedAt() @db.Timestamptz(6)
  updatedBy String?           @db.Uuid
  files     BaseMessageFile[]
  messages  BaseMessage[]

  @@map("base_message_template")
}
